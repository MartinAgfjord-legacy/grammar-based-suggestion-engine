#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ch:Introduction"

\end_inset


\end_layout

\begin_layout Section
An alternative user interface
\end_layout

\begin_layout Standard
In this thesis we will investigate how we can create a user interface which
 allows us to execute queries in a query language by expressing instructions
 in natural language.
 In other terms, we want to translate from a natural language into a query
 language.
 A query language is a computer language which is used to query a database
 or index.
 A natural language is a language that humans use to communicate with each
 other.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This is not good.
 The thesis is not primarly about speech to instructions.
 Needs to be rewritten.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A common communication method between humans and computers is through carefully
 designed user interfaces which are constructed in order to create machine
 readable instructions.
 Such interfaces often require either physical or graphical interaction.
 In the recent years, we've seen an increasing number of applications that
 are using an alternative method of instructing computers, by interpreting
 instructions formulated in a human language, i.e.
 translating a natural language into machine readable instructions.
 Such applications facilitate the communication between humans and computers.
 If computers can understand natural languages, one can just speak to them
 and tell them what to do.
\end_layout

\begin_layout Plain Layout
The big question is, how can a computer understand natural languages? One
 well-known approach is based on machine learning, where the computer learn
 human languages by analyzing a lot of data.
 The other approach (which we will focus on in this thesis) is based on
 the theory of grammars in order to understand natural languages.
 The idea is to define a set of structured rules in order to create words
 and combine them to construct clauses and phrases.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Problem description
\end_layout

\begin_layout Standard
How can one retrieve information from a computer by writing instructions
 in a natural language? The inspiration for this thesis came from Facebook
 graph search
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://www.facebook.com/about/graphsearch
\end_layout

\end_inset

, which is a service that allows users to search for entities by asking
 the server for information in a natural language.
\end_layout

\begin_layout Standard
In this project, we have chosen examine how a similar service can be realized.
 We have limited the project to handle questions that can occur naturaly
 in the intranet of a software development company.
 We assume that there exists an intranet which consists of a database with
 information about employees, customers and projects.
 A typical question to ask in this environment could be
\end_layout

\begin_layout Verbatim

Which people know Java?
\end_layout

\begin_layout Standard
The answer would be a list of all employees in the database who have some
 degree of expertise of the programming language 
\shape smallcaps
Java
\shape default
.
 However, when using search engines, expert users do not ask questions as
 the one above.
 The simply rely purely on keywords.
 The following question is more suited for expert users
\end_layout

\begin_layout Verbatim

people java
\end_layout

\begin_layout Standard
How can we create a user interface that is sufficient for both regular-
 and expert users? And how can we translate these questions into machine
 readable queries?
\end_layout

\begin_layout Section
A proposed solution
\end_layout

\begin_layout Standard
Query languages require precise syntax, we therefore need precise translation
 from a natural language into a query language.
 Since we have a limited scope of questions, we know all questions that
 can be asked - and we know how their machine readable representation skall
 look like.
 We only need a tool which we can use to make the mapping between natural
 language into query language.
 A very flexible tool we can use to accomplish this is a multilingual grammar.
 
\end_layout

\begin_layout Standard
A grammar is a set of structural rules which decide how words can can be
 created and be combined into clauses and phrases.
 By expressing 
\emph on
how
\emph default
 words can be combined into a question in one language one can also use
 the same logic to express how the same question can be produced in another
 language.
 A 
\emph on
multilingual 
\emph default
grammar is a special type of grammar which can translate between two or
 more languages.
\end_layout

\begin_layout Standard
Grammars has been used since the 1950's in the field of computer science
 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 4"
key "ranta:2011"

\end_inset

, and they have played a main role in the development of compilers where
 they are used to translate source code into machine readable instructions.
\end_layout

\begin_layout Section
Grammatical framework
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:GF"

\end_inset

Grammatical framework (GF) is a functional programming language for creating
 grammars for natural languages.
 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 1"
key "ranta:2011"

\end_inset

 GF features a strong type system, separate abstract and concrete syntax
 rules and reusable libraries to facilitate design of grammars.
 For a reader with a background within compilers, one can easily see that
 GF is very much based on the theory of programming languages.
 GF adopts the use of abstract and concrete syntax in the same sense as
 in compiler theory.
 
\end_layout

\begin_layout Standard
Abstract syntax is a tree representation which captures the 
\emph on
meaning 
\emph default
of a sentence, and leaves out anything irrelevant.
 The concrete syntax represents a natural language.
 It describes how an abstract syntax tree is represented as a string in
 the natural language.
 
\end_layout

\begin_layout Standard
With both abstract and concrete syntaxes, GF is able to create a 
\emph on
parser
\emph default
 and a 
\emph on
linearizer
\emph default
 for all given concrete languages.
 The parser translates strings into abstract syntax and the linearizer transalte
s abstract syntax tree's into string representations for a specified concrete
 syntax.
 In addition, GF can also derive a 
\emph on
generator
\emph default
 for the abstract syntax.
 The generator can create all possible abstract syntax trees.
\end_layout

\begin_layout Standard
Because GF separates abstract and concrete syntax, one can easily add a
 new concrete syntax (natural language) to an existing abstract syntax.
 This advantage also makes it easy to translate between many languages.
\end_layout

\begin_layout Subsection
A simple example
\end_layout

\begin_layout Standard
The following section presents an example of how GF can be used to create
 a grammar that can generate and translate the sentence 
\emph on
which people know Java? 
\emph default
into Apache Solr query language and vice verca.
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
Apache Solr is a search platform based on Apache Lucene.
 We will explain more about Solr query language later in the thesis.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Abstract syntax
\end_layout

\begin_layout Standard
To model the meaning of sentences, GF adopts the use of functions and 
\emph on
categories
\emph default
.
 A category (
\emph on
cat
\emph default
) in GF is the same as a data type.
 We start by listing the categories we need.
 We then define how our data types can take on values.
 This is achieved by using functions.
 The functions in an abstract syntax are not implemented, we can therefore
 only see the function declarations.
 The purpose for this is to allow the concrete syntaxes to choose how to
 represent the semantics.
 Two concrete syntaxes can therefore implement the same semantics differently.
\end_layout

\begin_layout Standard
We define a function 
\noun on
Java : object 
\noun default
which means that 
\noun on
Java
\noun default
 is a constant
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
A function without arguments is called a constant in functional programming
 languages.
\end_layout

\end_inset

 and returns a value of type 
\noun on
object
\noun default
.
 
\noun on
Know
\noun default
 takes one argument of the type 
\noun on
object
\noun default
 and returns a value of type 
\noun on
relation
\noun default
.
\end_layout

\begin_layout Standard
A question can be created by obtaining a value of the type 
\noun on
question.

\noun default
 Only
\noun on
 MkQuestion
\noun default
 returns the desired type and it takes two arguments, one of type
\noun on
 subject
\noun default
 the other of type 
\noun on
relation
\noun default
.
 Such data types can be created by using other functions in this grammar.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "float"
inline false
status open

\begin_layout Plain Layout

abstract Questions = { 
\end_layout

\begin_layout Plain Layout

    flags startcat = Question; 
\end_layout

\begin_layout Plain Layout

    cat
\end_layout

\begin_layout Plain Layout

     Question ; -- A question
\end_layout

\begin_layout Plain Layout

     Subject ;  -- The subject of a question
\end_layout

\begin_layout Plain Layout

     Relation ; -- A verb phrase
\end_layout

\begin_layout Plain Layout

     Object ;   -- an object
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

    fun		 	  
\end_layout

\begin_layout Plain Layout

     MkQuestion : Subject -> Relation -> Question ;
\end_layout

\begin_layout Plain Layout

     People : Subject ;
\end_layout

\begin_layout Plain Layout

     Know : Object -> Relation ;
\end_layout

\begin_layout Plain Layout

     Java : Object ; 
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
Abstract syntax
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Concrete syntax
\end_layout

\begin_layout Standard
Some text about what we can do with the concrete syntaxes
\end_layout

\begin_layout Standard
English concrete syntax
\end_layout

\begin_layout Standard
Solr concrete syntax
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "float"
inline false
status open

\begin_layout Plain Layout

concrete QuestionsEng of Questions = {
\end_layout

\begin_layout Plain Layout

    lincat
\end_layout

\begin_layout Plain Layout

     Question = Str ;
\end_layout

\begin_layout Plain Layout

     Subject = Str ;
\end_layout

\begin_layout Plain Layout

     Relation = Str ;
\end_layout

\begin_layout Plain Layout

     Object = Str ;
\end_layout

\begin_layout Plain Layout

    lin
\end_layout

\begin_layout Plain Layout

     MkQuestion subject relation = subject ++ "who" ++ relation ;
\end_layout

\begin_layout Plain Layout

     People = "people" ;
\end_layout

\begin_layout Plain Layout

     Know object = "know" ++ object ;
\end_layout

\begin_layout Plain Layout

     Java = "Java" ;
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
Abstract syntax
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
