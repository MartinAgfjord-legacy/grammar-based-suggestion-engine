#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ch:Introduction"

\end_inset


\end_layout

\begin_layout Section
An alternative user interface
\end_layout

\begin_layout Standard
In this thesis we will investigate how we can create a user interface which
 allows us to execute queries in a query language by expressing instructions
 in natural language.
 In other terms, we want to translate from a natural language into a query
 language.
 A query language is a computer language which is used to query a database
 or index.
 A natural language is a language that humans use to communicate with each
 other.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This is not good.
 The thesis is not primarly about speech to instructions.
 Needs to be rewritten.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A common communication method between humans and computers is through carefully
 designed user interfaces which are constructed in order to create machine
 readable instructions.
 Such interfaces often require either physical or graphical interaction.
 In the recent years, we've seen an increasing number of applications that
 are using an alternative method of instructing computers, by interpreting
 instructions formulated in a human language, i.e.
 translating a natural language into machine readable instructions.
 Such applications facilitate the communication between humans and computers.
 If computers can understand natural languages, one can just speak to them
 and tell them what to do.
\end_layout

\begin_layout Plain Layout
The big question is, how can a computer understand natural languages? One
 well-known approach is based on machine learning, where the computer learn
 human languages by analyzing a lot of data.
 The other approach (which we will focus on in this thesis) is based on
 the theory of grammars in order to understand natural languages.
 The idea is to define a set of structured rules in order to create words
 and combine them to construct clauses and phrases.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Problem description
\end_layout

\begin_layout Standard
The inspiration for this thesis came from Facebook's graph search, which
 is a service that allows users to search for entities by asking the server
 for information in a natural language.
 The service uses specific keywords in order to extract the contextual meaning
 of the question.
 We want to examine how a similar service can be realized by using a 
\emph on
grammar
\emph default
.
 A grammar is a set of structural rules which decide how words can can be
 created and be combined into clauses and phrases.
\end_layout

\begin_layout Standard
The use of grammars has a long history in the field of computer science
 as they are extensively used to translate source code into machine readable
 instructions.
\end_layout

\begin_layout Section
Grammatical framework
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:GF"

\end_inset

Grammatical framework (GF) is a functional programming language for creating
 grammars for natural languages.
 
\begin_inset CommandInset citation
LatexCommand citep
key "ranta:2011"

\end_inset

 GF features a strong type system, separate abstract and concrete syntax
 rules and reusable libraries to facilitate design of grammars.
 For a reader with a background within compilers, one can easily see that
 GF is very much based on the theory of programming languages.
 GF adopts the use of abstract and concrete syntax in the same sense as
 in compiler theory.
 
\end_layout

\begin_layout Standard
Abstract syntax is a tree representation which includes the semantically
 important information of a language, but leaves out details which are language
 specific and do not contribute to the semantics of the language.
 The concrete syntax represents a natural language.
 It describes how an abstract syntax tree is represented as a string in
 the natural language.
 
\end_layout

\begin_layout Standard
With both abstract and concrete syntaxes, GF is able to create a parser,
 for all given concrete languages.
 The parser translates strings into abstract syntax and the generator transaltes
 abstract syntax tree's into string representations for the specified concrete
 syntax.
\end_layout

\begin_layout Standard
This makes GF an excellent tool for multilingual translation.
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
Multilingual translation means translating between many languages
\end_layout

\end_inset

 A string can be 
\emph on
parsed
\emph default
 into abstract syntax and this tree can then be 
\emph on
linearized
\emph default
 into any given concrete syntax by using the generator for the language.
 The distinction of abstract and concrete syntax also makes it easy to extend
 the grammar with more concrete languages.
\end_layout

\end_body
\end_document
