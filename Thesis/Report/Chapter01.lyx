#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ch:Introduction"

\end_inset


\end_layout

\begin_layout Section
Motivation for this thesis
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Motivation"

\end_inset

The most common communication between humans and computers is through carefully
 designed user interfaces which are constructed to be able to create machine
 readable instructions.
 Such interfaces often require either physical or graphical interaction.
 In the recent years, we've seen an increasing number of applications that
 are using an alternative method of instructing computers, by interpreting
 instructions formulated in a human language, i.e.
 translating a natural language into machine readable instructions.
 Such applications facilitate the communication between humans and computers,
 if computers can understand natural languages, one can just speak to them
 and tell them what to do.
\end_layout

\begin_layout Standard
The big question is, how can a computer understand natural languages? One
 well-known approach is based on machine learning, where the computer learn
 human languages by analyzing a lot of data.
 The other approach (which we will focus on in this thesis) is based on
 the theory of grammars in order to understand natural languages.
 The idea is to define a set of structured rules in order to create words
 and combine them to construct clauses and phrases.
\end_layout

\begin_layout Section
Problem description
\end_layout

\begin_layout Standard
When searching for information ..
\end_layout

\begin_layout Section
Grammatical framework
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:GF"

\end_inset

Grammatical framework (GF) is a functional programming language for creating
 grammars for natural languages.
 GF features a strong type system, separate abstract and concrete syntax
 rules and reusable libraries to facilitate design of grammars.
 For a reader with a background within compilers, one can easily see that
 GF is very much based on the theory of programming languages.
 In the same sense as in compiler theory, GF adopts the use of abstract
 and concrete syntax.
 
\end_layout

\begin_layout Standard
Abstract syntax is a tree representation which includes the semantically
 important information of a language, but leaves out details who are language
 specific and do not contribute to the semantics of the language.
 The concrete syntax represents a natural language.
 It describes how an abstract syntax tree is represented as a string in
 the natural language.
 
\end_layout

\begin_layout Standard
With both abstract and concrete syntaxes, GF is able to create a parser
 and a generator for all given concrete languages.
 The parser translates strings into abstract syntax and the generator transaltes
 abstract syntax tree's into string representations for the specified concrete
 syntax.
\end_layout

\begin_layout Standard
This makes GF an excellent tool for multilingual translation.
 A string can be parsed into abstract syntax and this tree can then be 
\emph on
linearized
\emph default
 into any concrete syntax by using the generator for the language.
 The distinction of abstract and concrete syntax also makes it easy to extend
 the grammar with more concrete languages.
\end_layout

\end_body
\end_document
