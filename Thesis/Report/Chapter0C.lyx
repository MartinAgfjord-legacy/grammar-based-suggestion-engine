#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
GF runtime systems and libraries
\end_layout

\begin_layout Section
GF runtime systems
\end_layout

\begin_layout Standard
While the GF-shell is a powerful tool, it is not very convenient to interact
 with when programming an application.
 It requires the hosting computer to have installed and also requires the
 application to have access to executing other applications, a major drawback.
 Luckily, the creators of GF has thought about this and built embeddable
 runtime systems for a few programming languages 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 3"
key "angelov:2011"

\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout
Actually, GF itself is built upon the Haskell runtime system.
\end_layout

\end_inset

.
 These runtime systems makes it possible to interact with a grammar directly
 through language specific data types.
 We have chosen to work with the 
\shape smallcaps
Java
\shape default
-runtime system in this project.
 The main purpose is because it is used by many developers and companies
 in the industry.
\end_layout

\begin_layout Subsection
Portable Grammar Format
\end_layout

\begin_layout Standard
The GF-shell interacts with grammars by interpreting the GF programming
 language.
 This allows us to write our grammars in an simple and convenient syntax.
 Interpreting the GF programming language directly is however a heavy operation
 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 13"
key "angelov:2011"

\end_inset

, especially with larger grammars.
 This is where the Portable Grammar Format (PGF) 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 14"
key "angelov:2011"

\end_inset

 comes in.
 PGF is a custom made machine language which is dynamically created by compiling
 a grammar with GF into a PGF-file.
 The runtime systems works exclusively with PGF-files.
\end_layout

\begin_layout Section
GF libraries
\end_layout

\begin_layout Standard
In order to use the 
\shape smallcaps
Java
\shape default
-runtime, we first need to generate a few libraries which is used by the
 runtime system.
 The 
\shape smallcaps
Java
\shape default
-runtime system depends on the C-runtime system and a special wrapper between
 the C-runtime and the 
\shape smallcaps
Java
\shape default
-runtime.
 The libraries are platform dependent and at the time of writing, no pre
 generated libraries exists.
 We therefore need to generate the libraries by ourselves.
 We will start by generating and installing the C-libraries.
 We will then go through how to generate the wrapper library.
\end_layout

\begin_layout Subsection
Generating the C-library
\end_layout

\begin_layout Standard
Start by fetching the needed dependencies
\end_layout

\begin_layout Quotation
sudo apt-get install gcc autoconf libtool
\end_layout

\begin_layout Standard
Download the latest source code of 
\shape smallcaps
GF
\shape default
 from 
\shape smallcaps
GitHub
\shape default
.
\end_layout

\begin_layout Quotation
git clone https://github.com/GrammaticalFramework/GF.git
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
It is also possible to download the project as an archive by visiting the
 repository url.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will receive a directory GF/.
 Change the current working directory to the C-runtime folder.
\end_layout

\begin_layout Quotation
cd GF/src/runtime/c
\end_layout

\begin_layout Standard
Generate a configuration file
\end_layout

\begin_layout Quotation
autoreconf -i
\end_layout

\begin_layout Standard
Check that all dependencies are met
\end_layout

\begin_layout Quotation
./configure
\begin_inset Marginal
status open

\begin_layout Plain Layout
If there exists a dependency that is not fulfilled, try to install a propriate
 package using your package-manager.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Build the program
\end_layout

\begin_layout Quotation
make
\end_layout

\begin_layout Standard
Install the libraries you just built
\end_layout

\begin_layout Quotation
sudo make install
\end_layout

\begin_layout Standard
The C-runtime for PGF is now installed.
\end_layout

\begin_layout Subsection
Generating the C to Java wrapper library
\end_layout

\begin_layout Standard
Start by installing the needed dependency
\end_layout

\begin_layout Quotation
sudo apt-get install g++
\end_layout

\begin_layout Standard
The wrapper is built by using a premade script which is executed in Eclipse.
 This step assumes that you have Eclipse installed with the CDT-plugin.
\begin_inset Marginal
status open

\begin_layout Plain Layout
If you don't have Eclipse, you can download it with your package manager,
 just do not forget to install the CDT-plugin.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Start Eclipse and choose 
\emph on
File > Import...

\emph default
 Choose to import 
\emph on
Existing Projects into Workspace
\emph default
 and click on the 
\emph on
Next
\emph default
 button.
 Select 
\emph on
Browse...

\emph default
 and navigate to the location where you downloaded GF from 
\shape smallcaps
GitHub
\shape default
 and press enter.
 Uncheck everything except 
\emph on
jpgf
\emph default
 and click on 
\emph on
Finish
\emph default
.
 You have now imported the project which can build the 
\shape smallcaps
Java
\shape default
-runtime system.
 
\end_layout

\begin_layout Standard
Unfortunately, the build-configuration for the 
\emph on
jpgf
\emph default
-project is not complete at time of writing.
 We therefore need to make additional adjustments in order to build the
 project.
\end_layout

\begin_layout Standard
Right-click on the project and choose 
\emph on
Properties
\emph default
.
 Click on 
\emph on
Includes
\emph default
 which is located below 
\emph on
GCC C Compiler
\emph default
.
 You will see one directory listed in the textbox.
 You need to check that this directory exists.
 If not, change it to the correct one.
 For instance, this tutorial was written using Ubuntu 14.04 amd64 with openjdk,
 hence the correct directory is 
\emph on
/usr/lib/jvm/java-7-openjdk-amd64/include
\emph default
.
\end_layout

\begin_layout Standard
The project also needs another flag in order to build properly.
 In the 
\emph on
Properties
\emph default
-window, click on 
\emph on
Miscellaneous 
\emph default
below 
\emph on
GCC C Compiler
\emph default
.
 add 
\emph on
-fPIC
\emph default
 to the text field next to 
\emph on
Other flags
\emph default
.
 Click on 
\emph on
Ok 
\emph default
to save the settings.
\end_layout

\begin_layout Standard
You can now build the project by choosing 
\emph on
Project > Build Project
\emph default
.
 If everything went well you shall have generated a file 
\emph on
libjpgf.so
\emph default
 in 
\emph on
Release (posix)/
\emph default
 .
 You can check that the dependencies of 
\emph on
libjpgf.so
\emph default
 is fulfilled by executing the following in a terminal
\end_layout

\begin_layout Quotation
ldd libjpgf.so
\end_layout

\begin_layout Standard
If you cannot see 
\emph on
not found
\emph default
 in the results, all dependencies are met.
 However if some dependencies are missing, try to locate the files and move
 them to 
\emph on
/usr/local/lib
\emph default
 (or 
\emph on
/usr/lib
\emph default
 in some distros).
\end_layout

\begin_layout Standard
The last step is to move 
\emph on
libjpgf.so
\emph default
 into the correct directory.
\end_layout

\begin_layout Quotation
mv libjpgf.so /usr/local/lib (or /usr/lib)
\end_layout

\begin_layout Standard
You have now installed the wrapper library.
\end_layout

\begin_layout Section
Using the Java-runtime
\end_layout

\end_body
\end_document
